; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "RunAsService"
#define MyAppVersion "1.0"
#define MyAppPublisher "Florian PERRICHOT"
#define MyAppURL "http://www.perrichot.com/"

#define MyExecutable =  "Perrich.RunAsService.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{720EB389-195E-44A8-8640-DDC7B4C4AA91}
AppName={code:GetServiceName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{code:GetServiceName}
DefaultGroupName={code:GetServiceName}
OutputDir=./
OutputBaseFilename=RunAsService.setup
Compression=lzma
SolidCompression=yes

[Files]
Source: "..\Perrich.RunAsService\bin\Release\{#MyExecutable}"; DestDir: "{app}"
Source: "..\Perrich.RunAsService\bin\Release\{#MyExecutable}.config"; DestDir: "{app}"
Source: "..\Perrich.RunAsService\bin\Release\configuration.xml"; DestDir: "{app}"
Source: "..\Perrich.RunAsService\bin\Release\log4net.dll"; DestDir: "{app}"

;Put here your service files


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
;Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Code]
var
  ServiceName, DisplayName, Description: String;

#include "service.iss"

procedure LoadData( IsUninstaller: Boolean ); 
var 
  XMLDoc, xmlNode: Variant;
begin  
  XMLDoc := CreateOleObject('MSXML2.DOMDocument'); 
  XMLDoc.async := False; 
  XMLDoc.resolveExternals := False;
  if IsUninstaller then
  begin                         
    XMLDoc.load(ExpandConstant('{app}\configuration.xml'));
  end
  else
  begin                        
    ExtractTemporaryFile('configuration.xml');
    XMLDoc.load(ExpandConstant('{tmp}\configuration.xml')); 
  end 
  if XMLDoc.parseError.errorCode <> 0 then 
  RaiseException('Error on line ' + IntToStr(XMLDoc.parseError.line) + ',position ' + IntToStr(XMLDoc.parseError.linepos) + ': ' + XMLDoc.parseError.reason); 

  xmlNode := XMLDoc.SelectSingleNode('configuration/name');
  ServiceName := xmlNode.Attributes.GetNamedItem('value').Value();
  
  xmlNode := XMLDoc.SelectSingleNode('configuration/displayName');
  DisplayName := xmlNode.Attributes.GetNamedItem('value').Value();
    
  xmlNode := XMLDoc.SelectSingleNode('configuration/description');
  Description := xmlNode.Attributes.GetNamedItem('value').Value();

  Log('Readed from XML file: DisplayName = ' + DisplayName + ', ServiceName = ' + ServiceName);
end;


function GetServiceName( ignore: String ): string;
begin
  if DisplayName = nil then
    LoadData(false);

  Result := DisplayName;
end;

procedure StopAndRemoveService();
var
  ResultCode: Integer;
begin
  Log('StopAndRemoveService if exists');
  
  if IsServiceInstalled(ServiceName) then
  begin
    Log(ServiceName + ' is installed, need to remove it');
    if IsServiceRunning(ServiceName) then
    begin
      Log(ServiceName + ' is started, stop it first');
      StopService(ServiceName);
      Sleep(3000);
    end;
    Exec(ExpandConstant('{win}\Microsoft.NET\Framework\v2.0.50727\installutil.exe'), ExpandConstant('/u {#MyExecutable}'), ExpandConstant('{app}'), SW_HIDE,
     ewWaitUntilTerminated, ResultCode);
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin  
  Log('CurStepChanged(' + IntToStr(Ord(CurStep)) + ') called');
  
  case CurStep of
    ssInstall:
      StopAndRemoveService();
    ssPostInstall:
    begin
      Exec(ExpandConstant('{win}\Microsoft.NET\Framework\v2.0.50727\installutil.exe'), ExpandConstant('{#MyExecutable}'), ExpandConstant('{app}'), SW_HIDE,
        ewWaitUntilTerminated, ResultCode);
      StartService(ServiceName);
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin               
  Log('CurUninstallStepChanged(' + IntToStr(Ord(CurUninstallStep)) + ') called');
  
  if CurUninstallStep=usUninstall then
  begin
    LoadData(true);
    StopAndRemoveService();
   end
end;
